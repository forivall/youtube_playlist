// Generated by CoffeeScript 1.4.0
(function() {
  var add_player, css, getScript, jquery_valid, version,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  if (window.console == null) {
    window.console = {
      log: function() {}
    };
  }

  css = {
    shadow: {
      'background-color': 'black',
      'position': 'fixed',
      'left': 0,
      'top': 0,
      'width': '100%',
      'height': '100%',
      'z-index': 1000,
      'opacity': 0.8
    },
    player_box: {
      'position': 'fixed',
      'left': '50%',
      'top': '50%',
      'width': 640,
      'height': 480,
      'margin-left': -320,
      'margin-top': -240,
      'z-index': 1001
    },
    prev_button: {
      'float': 'left'
    },
    next_button: {
      'float': 'right'
    }
  };

  getScript = function(url, success) {
    var done, head, script;
    script = document.createElement('script');
    script.src = url;
    head = document.getElementsByTagName('head')[0];
    done = false;
    script.onload = script.onreadystatechange = function() {
      var ready, _ref;
      ready = !this.readyState || ((_ref = this.readyState) === 'loaded' || _ref === 'complete');
      if (!done && ready) {
        done = true;
        success();
        script.onload = script.onreadystatechange = null;
        return head.removeChild(script);
      }
    };
    return head.appendChild(script);
  };

  add_player = function($) {
    var $next_button, $player, $player_box, $prev_button, $shadow, cancel, ids, index, play_current, play_next, play_prev, player, player_error, player_id, player_ready, player_state_change, url;
    $.getScript('//www.youtube.com/iframe_api');
    ids = [];
    url = new RegExp('https?://(www.)?youtube.com/');
    $('a[href^="http"]').each(function() {
      var id;
      if (!$(this).attr('href').match(url)) {
        return;
      }
      id = this.href.replace(/^.*v=/, '').replace(/\&.*$/, '');
      if (__indexOf.call(ids, id) < 0) {
        return ids.push(id);
      }
    });
    console.log("video ids", ids);
    index = 0;
    player = null;
    player_id = 'playlist_player';
    play_current = function() {
      console.log('Playing', index, ids[index]);
      return player.loadVideoById(ids[index]);
    };
    play_next = function() {
      index++;
      if (index >= ids.length) {
        index -= ids.length;
      }
      return play_current();
    };
    play_prev = function() {
      index--;
      if (index < 0) {
        index += ids.length;
      }
      return play_current();
    };
    cancel = function() {
      $('#shadow, #player_box').remove();
      return $(document).unbind('keyup.player');
    };
    $(document).bind('keyup.player', function(e) {
      if (e.keyCode === 27) {
        cancel();
      }
      if (e.keyCode === 39) {
        play_next();
      }
      if (e.keyCode === 37) {
        return play_prev();
      }
    });
    $shadow = $('<div />', {
      id: 'shadow',
      css: css.shadow,
      click: cancel
    });
    $player_box = $('<div />', {
      id: 'player_box',
      css: css.player_box
    });
    $player = $('<div />', {
      id: player_id
    });
    $prev_button = $('<a />', {
      href: 'javascript:;',
      text: 'previous',
      css: css.prev_button,
      click: play_prev
    });
    $next_button = $('<a />', {
      href: 'javascript:;',
      text: 'next',
      css: css.next_button,
      click: play_next
    });
    $player_box.append($player).append($prev_button).append($next_button);
    $('body').append($shadow).append($player_box);
    player_ready = function(event) {
      console.log('player ready');
      return event.target.playVideo();
    };
    player_error = function(event) {
      var errors, msg;
      errors = {
        2: 'invalid video id',
        5: 'video not supported in html5',
        100: 'video removed or private',
        101: 'video not embedable',
        150: 'video not embedable'
      };
      msg = errors[event.data] || 'unknown error';
      console.log("Error", msg);
      ids.splice(index, 1);
      if (index >= ids.length) {
        index = 0;
      }
      return play_current();
    };
    player_state_change = function(event) {
      if (event.data === YT.PlayerState.ENDED) {
        return play_next();
      }
    };
    return window.onYouTubeIframeAPIReady = function() {
      return player = new YT.Player(player_id, {
        height: '390',
        width: '640',
        videoId: ids[0],
        events: {
          'onReady': player_ready,
          'onError': player_error,
          'onStateChange': player_state_change
        }
      });
    };
  };

  jquery_valid = false;

  if ((typeof jQuery !== "undefined" && jQuery !== null) && jQuery.fn && jQuery.fn.jquery) {
    version = jQuery.fn.jquery.split('.');
    if (version.length === 3 && parseInt(version[1]) > 3) {
      console.log('using in page jquery version', jQuery.fn.jquery);
      add_player(jQuery);
      jquery_valid = true;
    }
  }

  if (!jquery_valid) {
    getScript("//ajax.googleapis.com/ajax/libs/jquery/1.8/jquery.min.js", function() {
      return add_player(jQuery.noConflict(true));
    });
  }

}).call(this);
